#include <time.h>

#include "sensing.h"
#include "interfaceKit.h"

#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))


Sensing::Sensing() : InterfaceKitCallbackHandler() {
    grayFloorLevel = { 20, 20 };
    for (int i = 0; i < 8; i++) {
        inputReadings[i] = new AveragedArray<int>(0.1);
        switch (i+1) {
            case RightFrontLight:
            case LeftFrontLight:
                sensorReadings[i] = new AveragedArray<int>(0.05);
                break;
            case LeftIR:
            case RightIR:
                sensorReadings[i] = new AveragedArray<int>(0.15);
                break;
            default:
                sensorReadings[i] = new AveragedArray<int>(0.3);
        }
    }
}

Sensing::~Sensing() {
    delete [] inputReadings;
    delete [] sensorReadings;
}

void Sensing::OnSensorChange(int index, int value) {
    sensorReadings[index]->add(value);  
}

void Sensing::OnInputChange(int index, int value) {
    inputReadings[index]->add(value);
}

int Sensing::getDistance(int sensor)
{
    if (sensorReadings[sensor]->getLatest() <= 20)
        return 0;
    
    return 4080 / (sensorReadings[sensor]->getLatest() - 20);
}

int Sensing::getSonarDistance(int sensor)
{
    return sensorReadings[sensor]->getLatest() * 1.296;
}

bool Sensing::getInput(int sensor) {
    return inputReadings[sensor]->getLatest();
}

bool Sensing::isOnBlack(int sensor) {
    int gray = grayFloorLevel[sensor - 3];
    bool black = (sensorReadings[sensor]->getLatest() <= gray - 8) || (sensorReadings[sensor]->getLatest() >= gray + 30);
   /* if (black) {
        printf("BLACK DETECTED F: %d, R:%d\n", gray, sensorReadings[sensor]->getLatest());    
    }*/
    return black;
}

void Sensing::adjustFloorLevel() {
    ensureInitialized();
    grayFloorLevel[0] = sensorReadings[3]->getLatest();
    grayFloorLevel[1] = sensorReadings[4]->getLatest();
    printf("FLOOR L: %d, R:%d\n", grayFloorLevel[0], grayFloorLevel[1]);
}

int Sensing::getLeftDistance()
{
    ensureInitialized();
    return getDistance(LeftIR);
}

int Sensing::getRightDistance()
{
    ensureInitialized();
    return getDistance(RightIR);
}

int Sensing::getSonarDistance()
{
    ensureInitialized();
    return getSonarDistance(6);
}

bool Sensing::getLeftWhisker()
{
    ensureInitialized();
    return getInput(1);
}

bool Sensing::getRightWhisker()
{
    ensureInitialized();
    return getInput(4);
}

bool Sensing::getLeftBumper()
{
    ensureInitialized();
    return getInput(3);
}

bool Sensing::getRightBumper()
{
    ensureInitialized();
    return getInput(2);
}

bool Sensing::isLeftOnBlack() {
    ensureInitialized();
    return isOnBlack(LeftBottomLight);    
}

bool Sensing::isRightOnBlack() {
    ensureInitialized();
    return isOnBlack(RightBottomLight);    
}

int Sensing::getRightLight() {
    ensureInitialized();
    return sensorReadings[RightFrontLight]->getLatest();
}

int Sensing::getLeftLight() {
    ensureInitialized();
    return sensorReadings[LeftFrontLight]->getLatest();
}

double Sensing::getFrequency() {
    int count=5;
    int* values;
    timespec* times;
    int length = sensorReadings[RightFrontLight]->getLatest(5, values, times);
    if (length == 0)
        return 0;
    
    int min = values[0], max = values[0];
    for (int i = 0; i < count; i++) {
        if (values[i] < min)
            min = values[i];
        if (values[i] > max)
            max = values[i];        
    }
    
    printf("MIN: %d, MAX: %d", min, max);
    delete [] values;
    delete [] times;
    return 0;
}
